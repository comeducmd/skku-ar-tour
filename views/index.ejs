<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>AR Tour in SKKU</title>
    <script src="https://aframe.io/releases/0.9.0/aframe.min.js"></script>
    <script src="https://jeromeetienne.github.io/AR.js/aframe/build/aframe-ar.js"></script>
    <script src="https://cdn.jsdelivr.net/gh/donmccurdy/aframe-extras@v6.0.0/dist/aframe-extras.min.js"></script>
    <script>
        function registerMarker(tag, id) {
            AFRAME.registerComponent(tag, {
                init: function() {
                    console.log(`${tag} is registered and initialized`)
                    const markerA = document.querySelector(id);
                    const entityA = markerA.getElementsByTagName("a-entity")[0];
                    entityA.addEventListener("click", function(ev, target) {
                        if (entityA.getAttribute("state") === "true") {
                            const mrID = entityA.id.slice(2, 4)
                            console.log("clicked");
                            console.log(`${mrID} is found`);
                            /* 저장 이벤트를 줄 땐 여기서 mrID를 로컬스토리지에 저장하는 방식 */
                            /* 로컬스토리지에 이미 저장되어 있으면 패스, 없으면 저장 */
                            if (entityA.hasAttribute("animation-mixer")) {
                                entityA.removeAttribute("animation-mixer");
                            }
                            entityA.setAttribute(
                                "animation-mixer",
                                "loop:once; clampWhenFinished:true"
                            );
                            entityA.setAttribute("state", "false");
                        }

                    });
                },
            });
        }

        const markers = [
            ["amarker", "#AmarkerA"],
            ["bmarker", "#BmarkerB"],
            ["cmarker", "#CmarkerC"],
            ["dmarker", "#DmarkerD"],
            ["emarker", "#EmarkerE"],
            ["fmarker", "#FmarkerF"],
            ["gmarker", "#GmarkerG"],
        ]
        markers.forEach((marker) => {
            registerMarker(marker[0], marker[1])
        })
    </script>
</head>

<body style="margin: 0px; overflow: hidden">
    <a-scene vr-mode-ui='enabled: false' embedded arjs='sourceType: webcam; sourceWidth:1280; sourceHeight:960; displayWidth: 1280; displayHeight: 960; debugUIEnabled: false;'>
        <a-marker amarker id="AmarkerA" emitevents="true" cursor="rayOrigin: mouse" preset="custom" type="pattern" url="/marker-patts/patternA.patt">
            <a-entity></a-entity>
        </a-marker>
        <a-marker bmarker id="BmarkerB" emitevents="true" cursor="rayOrigin: mouse" preset="custom" type="pattern" url="/marker-patts/patternB.patt">
            <a-entity></a-entity>
        </a-marker>
        <a-marker cmarker id="CmarkerC" emitevents="true" cursor="rayOrigin: mouse" preset="custom" type="pattern" url="/marker-patts/patternC.patt">
            <a-entity></a-entity>
        </a-marker>
        <a-marker dmarker id="DmarkerD" emitevents="true" cursor="rayOrigin: mouse" preset="custom" type="pattern" url="/marker-patts/patternD.patt">
            <a-entity></a-entity>
        </a-marker>
        <a-marker emarker id="EmarkerE" emitevents="true" cursor="rayOrigin: mouse" preset="custom" type="pattern" url="/marker-patts/patternE.patt">
            <a-entity></a-entity>
        </a-marker>
        <a-marker fmarker id="FmarkerF" emitevents="true" cursor="rayOrigin: mouse" preset="custom" type="pattern" url="/marker-patts/patternF.patt">
            <a-entity></a-entity>
        </a-marker>
        <a-marker gmarker id="GmarkerG" emitevents="true" cursor="rayOrigin: mouse" preset="custom" type="pattern" url="/marker-patts/patternG.patt">
            <a-entity></a-entity>
        </a-marker>
        <a-entity camera></a-entity>
    </a-scene>
    <script>
        const assets = {
            A: ["A1", "A2", "A3", "A4", "A5", "A6"],
            B: ["B1"],
            C: ["C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9"],
            D: ["D1", "D2", "D3", "D4", "D5", "D6"],
            E: ["E1"],
            F: ["F1", "F2"],
            G: ["G1", "G2", "G3", "G4"]
        };
        const init = () => {
            const markers = document.querySelectorAll("a-marker");
            markers.forEach((marker) => {
                marker.addEventListener("markerFound", (e) => {
                    console.log("marker is found", marker.id);
                    const marker_assets = assets[marker.id[0]];
                    const randIdx = Math.floor(Math.random() * marker_assets.length);
                    const randAsset = marker_assets[randIdx];
                    const entity = marker.getElementsByTagName("a-entity")[0];
                    entity.setAttribute("id", `ae${randAsset}`);
                    entity.setAttribute("gltf-model", `url(/models/${randAsset}.gltf)`);
                    entity.setAttribute("state", "true");
                });
                marker.addEventListener("markerLost", (e) => {
                    console.log("marker is lost", marker.id);
                    const entity = marker.getElementsByTagName("a-entity")[0];
                    entity.removeAttribute("id");
                    entity.removeAttribute("gltf-model");
                    entity.removeAttribute("state");
                });
            });
        };
        init();
    </script>
</body>

</html>